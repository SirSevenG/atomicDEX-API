# Job template for MM2 Release stage build

parameters:
  name: ''  # defaults for any parameters that aren't specified
  os: ''
  bob_passphrase: ''
  bob_userpass: ''
  alice_passphrase: ''
  alice_userpass: ''

jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: 0 # 0 means infinite for self-hosted agent
    pool:
      name: Default
      demands: agent.os -equals ${{ parameters.os }}
    steps:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-a-job-scoped-variable-from-a-script
      - bash: |
          export SHORT_HASH="$(git rev-parse --short=9 HEAD)"
          echo "##vso[task.setvariable variable=COMMIT_HASH]${SHORT_HASH}"
          export TAG="$(git tag -l --points-at HEAD)"
          echo "##vso[task.setvariable variable=COMMIT_TAG]${TAG}"
          if [ -z $TAG ]; then
            echo "Commit tag is empty"
            export RELEASE_TAG=beta-2.0.$(Build.BuildId)
          else
            export DEBUG_UPLOADED="$(curl -s https://api.github.com/repos/KomodoPlatform/atomicDEX-API/releases/tags/$TAG | grep $(Agent.OS)-Debug)"
            export RELEASE_UPLOADED="$(curl -s https://api.github.com/repos/KomodoPlatform/atomicDEX-API/releases/tags/$TAG | grep $(Agent.OS)-Release)"
            export RELEASE_TAG=$TAG
          fi
          echo DEBUG_UPLOADED:$DEBUG_UPLOADED
          echo RELEASE_UPLOADED:$RELEASE_UPLOADED
          echo RELEASE_TAG:$RELEASE_TAG
          echo "##vso[task.setvariable variable=DEBUG_UPLOADED]${DEBUG_UPLOADED}"
          echo "##vso[task.setvariable variable=RELEASE_UPLOADED]${RELEASE_UPLOADED}"
          echo "##vso[task.setvariable variable=RELEASE_TAG]${RELEASE_TAG}"
        displayName: Setup ENV
      - powershell: |
          .\marketmaker_build_depends.cmd
        displayName: Build Windows deps
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['COMMIT_TAG'], '' ) )
      - bash: |
          rm -rf upload
          mkdir upload
        displayName: 'Recreate upload dir'
      - bash: |
          echo 2.0.$(Build.BuildId)_$(Build.SourceBranchName)_$(COMMIT_HASH)_$(Agent.OS)_Debug > MM_VERSION
          cat MM_VERSION
          touch mm2src/common/build.rs
          if [ $AGENT_OS = "Linux" ]
          then
            docker build -f Dockerfile.ubuntu.ci -t mm2_builder .
            export UID=$(id -u)
            export GID=$(id -g)
            docker run \
            --user $UID:$GID \
            -v /home/azureagent/docker-cargo-cache/git:/root/.cargo/git \
            -v /home/azureagent/docker-cargo-cache/registry:/root/.cargo/registry \
            -v $PWD:$PWD \
            -w $PWD \
            -e HOME=/root \
            mm2_builder \
            /bin/bash -c "source /root/.cargo/env && cargo build --features native -vv --target-dir target-xenial"
          else
            cargo build --features native -vv
          fi
        displayName: 'Build MM2 Debug'
        condition: eq( variables['DEBUG_UPLOADED'], '' )
      - bash: |
          zip upload/mm2-$(COMMIT_HASH)-$(Agent.OS)-Debug target-xenial/debug/mm2 -j
        displayName: 'Prepare debug build upload Linux'
        condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['DEBUG_UPLOADED'], '' ) )
      - bash: |
          cd target/debug
          zip ../../upload/mm2-$(COMMIT_HASH)-$(Agent.OS)-Debug mm2.dSYM mm2 -r
        displayName: 'Prepare debug build upload MacOS'
        condition: and( eq( variables['Agent.OS'], 'Darwin' ), eq( variables['DEBUG_UPLOADED'], '' ) )
      - powershell: |
          7z a .\upload\mm2-$(COMMIT_HASH)-$(Agent.OS)-Debug.zip .\target\debug\mm2.exe .\target\debug\*.dll "$Env:windir\system32\msvcr100.dll" "$Env:windir\system32\msvcp140.dll" "$Env:windir\system32\vcruntime140.dll"
        displayName: 'Prepare debug build upload Windows'
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['DEBUG_UPLOADED'], '' ) )
      - bash: |
          rm -f MM_VERSION
          echo 2.0.$(Build.BuildId)_$(Build.SourceBranchName)_$(COMMIT_HASH)_$(Agent.OS)_Release > MM_VERSION
          cat MM_VERSION
          touch mm2src/common/build.rs
          if [ $AGENT_OS = "Linux" ]
          then
            docker build -f Dockerfile.ubuntu.ci -t mm2_builder .
            export UID=$(id -u)
            export GID=$(id -g)
            docker run \
            --user $UID:$GID \
            -v /home/azureagent/docker-cargo-cache/git:/root/.cargo/git \
            -v /home/azureagent/docker-cargo-cache/registry:/root/.cargo/registry \
            -v $PWD:$PWD \
            -w $PWD \
            -e HOME=/root \
            mm2_builder \
            /bin/bash -c "source /root/.cargo/env && cargo build --features native --release -vv --target-dir target-xenial"
          else
            cargo build --features native --release -vv
          fi
        displayName: 'Build MM2 Release'
        condition: eq( variables['RELEASE_UPLOADED'], '' )
      - bash: |
          objcopy --only-keep-debug target-xenial/release/mm2 target-xenial/release/mm2.debug
          strip -g target-xenial/release/mm2
          zip upload/mm2-$(COMMIT_HASH)-$(Agent.OS)-Release target-xenial/release/mm2 -j
          zip upload/mm2-$(COMMIT_HASH)-$(Agent.OS)-Release-debuginfo.zip target-xenial/release/mm2.debug -j
        displayName: 'Prepare release build upload Linux'
        condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['RELEASE_UPLOADED'], '' ) )
      - bash: |
          cd target/release
          zip ../../upload/mm2-$(COMMIT_HASH)-$(Agent.OS)-Release.zip mm2
          zip ../../upload/mm2-$(COMMIT_HASH)-$(Agent.OS)-Release.dSYM.zip mm2.dSYM -r
        displayName: 'Prepare release build upload MacOS'
        condition: and( eq( variables['Agent.OS'], 'Darwin' ), eq( variables['RELEASE_UPLOADED'], '' ) )
      - task: Docker@2
        displayName: Build and Push Docker Release image
        condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['RELEASE_UPLOADED'], '' ) )
        inputs:
          containerRegistry: dockerhub
          repository: komodoofficial/atomicdexapi
          command: buildAndPush
          tags: |
            $(RELEASE_TAG)
          Dockerfile: Dockerfile.release
      - powershell: |
          7z a .\upload\mm2-$(COMMIT_HASH)-$(Agent.OS)-Release.zip .\target\release\mm2.exe .\target\release\*.dll "$Env:windir\system32\msvcr100.dll" "$Env:windir\system32\msvcp140.dll" "$Env:windir\system32\vcruntime140.dll"
        displayName: 'Prepare release build upload Windows'
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['RELEASE_UPLOADED'], '' ) )
      - task: GitHubRelease@0
        inputs:
          action: edit
          gitHubConnection: artemii235
          isPreRelease: true
          assets: 'upload/*'
          assetUploadMode: replace
          tagSource: manual
          tag: $(RELEASE_TAG)
        condition: or( eq( variables['RELEASE_UPLOADED'], '' ), eq( variables['DEBUG_UPLOADED'], '' ) )
